# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../../build/config.gni")

## Build so {{{
config("config") {
  visibility = [ ":*" ]

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
    "-Wunused-variable",
    "-Wno-unused-but-set-variable",
  ]
  cflags_cc = [ "-fexceptions" ]
}

ohos_shared_headers("smartperf_daemon") {
  include_dirs = [
    "interface"
  ]

  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
}

ohos_executable("SP_daemon") {
  sources = [
    "AI_schedule.cpp",
    "ByTrace.cpp",
    "CPU.cpp",
    "Capture.cpp",
    "DDR.cpp",
    "Dubai.cpp",
    "FPS.cpp",
    "FileDescriptor.cpp",
    "GPU.cpp",
    "GameEvent.cpp",
    "GetLog.cpp",
    "GpuCounter.cpp",
    "GpuCounterCallback.cpp",
    "Network.cpp",
    "Power.cpp",
    "RAM.cpp",
    "Temperature.cpp",
    "Threads.cpp",
    "client_control.cpp",
    "control_call_cmd.cpp",
    "cpu_info.cpp",
    "editor_command.cpp",
    "effective.cpp",
    "heartbeat.cpp",
    "hiperf.cpp",
    "lock_frequency.cpp",
    "navigation.cpp",
    "parse_click_complete_trace.cpp",
    "parse_click_response_trace.cpp",
    "parse_radar.cpp",
    "parse_slide_fps_trace.cpp",
    "sdk_data_recv.cpp",
    "service_plugin.cpp",
    "smartperf_command.cpp",
    "smartperf_main.cpp",
    "sp_log.cpp",
    "sp_profiler_factory.cpp",
    "sp_server_socket.cpp",
    "sp_task.cpp",
    "sp_thread_socket.cpp",
    "sp_utils.cpp",
    "stalling_rate_trace.cpp",
    "startup_delay.cpp",
  ]

  sources += [
    "argument_parser.cpp",
    "task_manager.cpp",
    "thread_pool.cpp",
  ]

  cflags = [
    "-O2",
    "-ffunction-sections",
    "-fdata-sections",
    "-fvisibility=hidden",
    "-flto",
  ]
  ldflags = [ "-Wl,--gc-sections", "-flto" ]
  include_dirs = [ "include" ]
  configs = [ ":config" ]
  deps = [
    ":smartperf_daemon"
  ]
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hiview:libucollection_utility",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libpng:libpng",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
  defines = [
    "HI_LOG_ENABLE",
    "LOG_DOMAIN = 0xD004100",
  ]
  if (arkxtest_able) {
    external_deps += [ "arkxtest:test_server_client" ]
    defines += [ "ARKTEST_ENABLE" ]
  }
}
## Build so }}}
